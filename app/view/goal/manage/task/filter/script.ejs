<script>
  async function taskFilter(task, box) {
    let tasks = await API.response(GoalTask.filter, task, box);
    if (!tasks) { return false; }

    let task_box = lib.element.create("div", { class: "box b1 container max-height-400 scroll-y" });

    if (!tasks.length) {
      task_box.append(lib.element.create("div", { class: "box b1 lucida-grande center" }, "Nenhuma tarefa foi criada."));
    }

    tasks.forEach(async task => {
      let task_div = lib.element.create("div", { class: "box b1 container border-st padding-5 margin-top-5 pointer" });
      task_div.append(lib.element.create("div", { class: "box b3-8 lucida-grande em08 bold" }, task.user_name));
      task_div.append(lib.element.create("div", { class: "box b4 lucida-grande em08 bold" }, lib.timestampToDate(task.date)));
      task_div.append(lib.element.create("div", { class: "box b4 lucida-grande em08 bold" }, task.status));

      let comment_icon = lib.element.icon("b8", "20", "/images/icon/comment.png");
      task_div.append(comment_icon);
      comment_icon.addEventListener("click", () => { commentDetail(task.id); });

      task_div.append(lib.element.create("div", { class: "box b1 lucida-grande em09 padding-5 border radius-5" }, task.description));
      task_box.append(task_div);

      let timeline_box = await timelineFilter({ task_id: task.id }, task_div);
      task_div.append(timeline_box);

      let comment_box = await commentFilter({ task_id: task.id }, task_div);
      task_div.append(comment_box);
    });

    return task_box;
  };
</script>