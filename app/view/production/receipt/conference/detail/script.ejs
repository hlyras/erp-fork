<script>
  async function approved(e, receipt_id) {
    e.preventDefault();
    let product = {
      id: e.target.id.value,
      approved_amount: e.target.amount.value
    };

    lib.auth(`Confirmar ${product.approved_amount} unidades`, async (pass) => {
      if (!pass) { return; }

      product.user_pass = pass;

      let response = await API.response(Production.receipt.conference.approved, product);
      if (!response) { return false; }

      lib.message(response.done);

      receiptDetail(receipt_id);
    });
  };

  async function reproved(e, receipt_id) {
    e.preventDefault();
    let product = {
      id: e.target.id.value,
      reproved_amount: e.target.amount.value
    };

    lib.auth(`Confirmar ${product.reproved_amount} unidades`, async (pass) => {
      if (!pass) { return; }

      product.user_pass = pass;

      let response = await API.response(Production.receipt.conference.reproved, product);
      if (!response) { return false; }

      lib.message(response.done);

      receiptDetail(receipt_id);
    });
  };

  async function filigranReproved(e, receipt_id) {
    e.preventDefault();
    let product = {
      id: e.target.id.value,
      filigran_reproved_amount: e.target.amount.value
    };

    lib.auth(`Confirmar ${product.filigran_reproved_amount} unidades`, async (pass) => {
      if (!pass) { return; }

      product.user_pass = pass;

      let response = await API.response(Production.receipt.conference.filigranReproved, product);
      if (!response) { return false; }

      lib.message(response.done);

      receiptDetail(receipt_id);
    });
  };

  async function receiptDetail(id) {
    let receipt = await API.response(Production.receipt.findById, id);
    if (!receipt) { return alert("Não foi possível encontrar o recebimento"); }

    lib.display("receipt-dropdown-box", "none");
    lib.display("receipt-detail-box", "");

    document.getElementById("conference-confirm-btn").dataset.receipt_id = receipt.id;

    let detail_div = document.getElementById("receipt-detail-div");
    detail_div.innerHTML = "";

    detail_div.append(lib.element.info("b3", "Nº da produção", receipt.production_id));
    detail_div.append(lib.element.info("b3", "Lacre", receipt.seal));
    detail_div.append(lib.element.info("b3", "Malote", `${receipt.pouch}/${receipt.preparation_volume}`));

    receipt.received_products.forEach(product => {
      let product_div = lib.element.create("div", { class: "box b1 container border-st shadow-st radius-5 padding-5 margin-top-5" });
      product_div.append(lib.element.create("div", { class: "mobile-box b2-3 bold em08 v-center" }, `${product.code} | ${product.name} | ${product.color}`));
      product_div.append(lib.element.info("b6", "Quantidade", product.amount));

      let approved_form = lib.element.create("form", { class: "mobile-box b3 container border-st padding-5 margin-top-5" });

      lib.isValidNumber(product.approved_amount) && approved_form.append(lib.element.create("div", { class: "box b1 em15 lucida-grande bold border-bottom-lg padding-5 center" }, `${product.approved_amount}`));
      lib.isValidNumber(product.approved_amount) && approved_form.append(lib.element.create("div", { class: "box b1 center lucida-grande bold em08 center margin-top-1" }, `Aprovado em:`));
      lib.isValidNumber(product.approved_amount) && approved_form.append(lib.element.create("div", { class: "box b1 center lucida-grande em08 center" }, lib.timestampToFulldate(product.approved_datetime)));

      !lib.isValidNumber(product.approved_amount) && approved_form.append(lib.element.create("input", {
        type: "hidden",
        name: "id",
        value: product.id
      }));

      !lib.isValidNumber(product.approved_amount) && approved_form.append(lib.element.create("input", {
        type: "number",
        name: "amount",
        class: "mobile-box b1 lucida-grande em15 bold border-bottom-lg-st padding-5 center",
        step: 1,
        onblur: "this.value=parseInt(this.value)",
        autocomplete: "off",
        role: "presentation",
        required: true,
        min: lib.isValidNumber(product.reproved_amount) && lib.isValidNumber(product.filigran_reproved_amount)
          && product.amount - product.reproved_amount - product.filigran_reproved_amount || 0,
        max: product.amount - (product.reproved_amount || 0) - (product.filigran_reproved_amount || 0)
      }));

      !lib.isValidNumber(product.approved_amount) && approved_form.append(lib.element.create("input", {
        type: "submit",
        name: "submit",
        value: "Aprovado",
        class: "mobile-box b1 btn-act lucida-grande em11 bold noborder radius-5 padding-5 margin-top-3 center pointer"
      }));

      !lib.isValidNumber(product.approved_amount) && approved_form.addEventListener("submit", (e) => { approved(e, receipt.id) });

      let reproved_form = lib.element.create("form", { class: "mobile-box b3 container border-st padding-5 margin-top-5" });

      lib.isValidNumber(product.reproved_amount) && reproved_form.append(lib.element.create("div", { class: "box b1 em15 lucida-grande bold border-bottom-lg padding-5 center" }, `${product.reproved_amount}`));
      lib.isValidNumber(product.reproved_amount) && reproved_form.append(lib.element.create("div", { class: "box b1 center lucida-grande bold em08 center margin-top-1" }, `Reprovado em:`));
      lib.isValidNumber(product.reproved_amount) && reproved_form.append(lib.element.create("div", { class: "box b1 center lucida-grande em08 center" }, lib.timestampToFulldate(product.reproved_datetime)));

      !lib.isValidNumber(product.reproved_amount) && reproved_form.append(lib.element.create("input", {
        type: "hidden",
        name: "id",
        value: product.id
      }));

      !lib.isValidNumber(product.reproved_amount) && reproved_form.append(lib.element.create("input", {
        type: "number",
        name: "amount",
        class: "mobile-box b1 lucida-grande em15 bold border-bottom-lg-st padding-5 center",
        step: 1,
        onblur: "this.value=parseInt(this.value)",
        autocomplete: "off",
        role: "presentation",
        required: true,
        min: lib.isValidNumber(product.approved_amount) && lib.isValidNumber(product.filigran_reproved_amount)
          && product.amount - product.approved_amount - product.filigran_reproved_amount || 0,
        max: product.amount - (product.approved_amount || 0) - (product.filigran_reproved_amount || 0)
      }));

      !lib.isValidNumber(product.reproved_amount) && reproved_form.append(lib.element.create("input", {
        type: "submit",
        name: "submit",
        value: "Defeito",
        class: "mobile-box b1 btn-cancel lucida-grande em11 bold noborder radius-5 padding-5 margin-top-3 center pointer"
      }));

      !lib.isValidNumber(product.reproved_amount) && reproved_form.addEventListener("submit", (e) => { reproved(e, receipt.id) });

      let filigran_reproved_form = lib.element.create("form", { class: "mobile-box b3 container border-st padding-5 margin-top-5" });

      lib.isValidNumber(product.filigran_reproved_amount) && filigran_reproved_form.append(lib.element.create("div", { class: "box b1 em15 lucida-grande bold border-bottom-lg padding-5 center" }, `${product.filigran_reproved_amount}`));
      lib.isValidNumber(product.filigran_reproved_amount) && filigran_reproved_form.append(lib.element.create("div", { class: "box b1 center lucida-grande bold em08 center margin-top-1" }, `Reprovado em:`));
      lib.isValidNumber(product.filigran_reproved_amount) && filigran_reproved_form.append(lib.element.create("div", { class: "box b1 center lucida-grande em08 center" }, lib.timestampToFulldate(product.filigran_reproved_datetime)));

      !lib.isValidNumber(product.filigran_reproved_amount) && filigran_reproved_form.append(lib.element.create("input", {
        type: "hidden",
        name: "id",
        value: product.id
      }));

      !lib.isValidNumber(product.filigran_reproved_amount) && filigran_reproved_form.append(lib.element.create("input", {
        type: "number",
        name: "amount",
        class: "mobile-box b1 lucida-grande em15 bold border-bottom-lg-st padding-5 center",
        step: 1,
        onblur: "this.value=parseInt(this.value)",
        autocomplete: "off",
        role: "presentation",
        required: true,
        min: lib.isValidNumber(product.approved_amount) && lib.isValidNumber(product.reproved_amount)
          && product.amount - product.approved_amount - product.reproved_amount || 0,
        max: product.amount - (product.approved_amount || 0) - (product.reproved_amount || 0)
      }));

      !lib.isValidNumber(product.filigran_reproved_amount) && filigran_reproved_form.append(lib.element.create("input", {
        type: "submit",
        name: "submit",
        value: "Def. Filigrana",
        class: "mobile-box b1 btn-cancel lucida-grande em11 bold noborder radius-5 padding-5 margin-top-3 center pointer"
      }));

      !lib.isValidNumber(product.filigran_reproved_amount) && filigran_reproved_form.addEventListener("submit", (e) => { filigranReproved(e, receipt.id) });

      product_div.append(approved_form);
      product_div.append(reproved_form);
      product_div.append(filigran_reproved_form);

      product.amount > 0 && detail_div.append(product_div);
    });
  };

  function closeReceiptDetail() {
    lib.display("receipt-detail-box", "none");
    lib.display("receipt-dropdown-box", "");
  };

  document.getElementById("conference-confirm-btn").addEventListener("click", async e => {
    let receipt = await API.response(Production.receipt.findById, e.target.dataset.receipt_id);
    if (!receipt) { return false; }

    for (let i in receipt.received_products) {
      if (receipt.received_products[i].amount > 0) {
        if (!lib.isValidNumber(receipt.received_products[i].approved_amount)) { return lib.message(`${receipt.received_products[i].name} pendente: Aprovados`); }
        if (!lib.isValidNumber(receipt.received_products[i].reproved_amount)) { return lib.message(`${receipt.received_products[i].name} pendente: Defeitos`); }
        if (!lib.isValidNumber(receipt.received_products[i].filigran_reproved_amount)) { return lib.message(`${receipt.received_products[i].name} pendente: Filigrana`); }
      }
    };

    lib.auth("Finalizar conferência", async (pass) => {
      if (!pass) { return; }

      let receipt = {
        id: e.target.dataset.receipt_id || "",
        user_pass: pass
      };

      let response = await API.response(Production.receipt.conference.confirm, receipt);
      if (!response) { return false; }

      lib.message(response.done, () => { window.location.reload() });
    });
  });
</script>