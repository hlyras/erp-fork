<script>
  async function receiptDetail(id) {
    let receipt = await API.response(Production.receipt.findById, id);
    if (!receipt) { return alert("Não foi possível encontrar o recebimento"); }

    lib.display("receipt-dropdown-box", "none");
    lib.display("receipt-detail-box", "");
    document.getElementById("receipt-conference-btn").addEventListener("click", () => { conferenceConfirm(receipt.id); });

    let detail_div = document.getElementById("receipt-detail-div");
    detail_div.innerHTML = "";

    detail_div.append(lib.element.info("b3", "Nº da produção", receipt.production_id));
    detail_div.append(lib.element.info("b3", "Lacre", receipt.seal));
    detail_div.append(lib.element.info("b3", "Malote", `${receipt.pouch}/${receipt.preparation_volume}`));

    receipt.products.forEach(product => {
      let product_div = lib.element.create("div", { class: "box b1 container border-st radius-5 padding-5 margin-top-5" });
      product_div.append(lib.element.create("div", { class: "mobile-box b2-3 em08 v-center" }, `${product.code} | ${product.name} | ${product.color}`));
      product_div.append(lib.element.info("b6", "Quantidade", product.amount));

      for (let i in receipt.received_products) {
        if (product.product_id == receipt.received_products[i].product_id) {
          product_div.append(lib.element.info("b6", "Recebido", (receipt.received_products[i].amount || "0")));
        }

        let approval_form = lib.element.create("form", { class: "mobile-box b3 container border-st padding-5 margin-top-5" });
        approval_form.append(lib.element.create("input",
          name: "amount",
          type: "number",
          class: "box b1"
        ));
      };

      detail_div.append(product_div);
    });
  };

  function closeReceiptDetail() {
    lib.display("receipt-detail-box", "none");
    lib.display("receipt-dropdown-box", "");
  };

  function receiptCount(e, receipt_id) {
    e.preventDefault();

    let received_product = {
      id: e.target.id.value,
      receipt_id: receipt_id,
      product_id: e.target.product_id.value,
      amount: e.target.amount.value
    };

    lib.pass(async (pass) => {
      received_product.user_pass = pass;

      let response = await API.response(Production.receipt.product.create, received_product);
      if (!response) { return false; }

      receiptDetail(receipt_id);
    });
  };

  // function countConfirm(receipt_id) {
  //   for (let i in receiptKart.products) {
  //     if (!receiptKart.products[i].id) {
  //       return lib.msg("Não é possível confirmar a contagem sem preencher todos os produtos.");
  //     }
  //   };

  //   lib.pass(async (pass) => {
  //     let receipt = {
  //       id: receipt_id || "",
  //       user_pass: pass
  //     };

  //     let response = await API.response(Production.receipt.count.confirm, receipt);
  //     if (!response) { return false; }

  //     lib.message(response.done);

  //     window.location.reload();
  //   });
  // };
</script>