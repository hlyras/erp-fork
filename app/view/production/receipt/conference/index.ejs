<html>

<head>
  <%- include('./../../../partials/head.ejs') %>
</head>

<body>
  <%- include('./../../../partials/nav.ejs') %>
  <section class="container h-center">
    <div id="product-dropdown-box" class="box b2 container dropdown ground margin-top-5">
      <input type="text" id="product-dropdown-input" name="product_id" data-id=""
        class="mobile-box a1 input-generic border-lg-st nofocus lucida-grande bold center"
        oninput="receiptDropdown(this)" placeholder="Nome ou código do produto" onclick="console.log('click');"
        role="presentation" autocomplete="off">
      <div id="product-dropdown-content" class="box b1 dropdown-content"></div>
    </div>
  </section>
  <%- include('./../../../partials/loader.ejs') %>
</body>
<footer>
  <%- include('./../../../partials/footer.ejs') %>
  <script src="/javascripts/scripts/production/main.js"></script>

  <script>
    async function receiptDropdown(input) {
      let products = [];

      if (input.value.length > 1) {
        products = await Production.receipt.filter({ seal: input.value });
        if (!products) { return false; }
      }

      let props = ["production_id", "seal", "status"];

      lib.dropdown.input(products, input, document.getElementById("product-dropdown-content"), props);
    };

    lib.dropdown.input = (arr, input, content, props) => {
      if (!input) { return console.error("Elemento não encontrado:", input); }

      content.innerHTML = "";
      content.style.display = 'block';

      input.onclick = function (event) {
        event.stopPropagation();
        if (this.readOnly) { this.value = ''; this.dataset.id = ''; this.readOnly = false; }
        content.style.display = 'block';
      };

      content.onclick = function (event) {
        event.stopPropagation();
      };

      arr.forEach(obj => {
        let obj_info = "";
        for (let i in props) {
          if (i != props.length - 1) { obj_info += `${obj[props[i]]} | ` }
          else { obj_info += `${obj[props[i]]}` }
        };

        const item = lib.element.create("div", {
          class: "box b1 lucida-grande bold box-hover wrapper padding-10 border pointer",
          'data-id': obj.id
        });

        for (let i in props) {

        };

        item.onclick = function (event) {
          lib.Dropdown.fillInput(item, input.id, content.id);
          content.style.display = 'none';
        };

        content.append(item);
      });

      document.addEventListener('click', function (event) {
        const dropdownContent = document.querySelector('.dropdown-content');
        if (dropdownContent.style.display === 'block') {
          dropdownContent.style.display = 'none';
        }
      });
    };

    lib.dropdown.fillDiv = (div, div_id, dropdown_id) => {
      document.getElementById(div_id).dataset.id = div.dataset.id;
      document.getElementById(div_id).value = div.value;
      document.getElementById(div_id).readOnly = true;

      document.getElementById(dropdown_id).innerHTML = "";
    };
  </script>
</footer>

</html>