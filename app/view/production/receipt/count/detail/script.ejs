<script>
  async function receiptDetail(id) {
    let receipt = await API.response(Production.receipt.findById, id);
    if (!receipt) { return lib.message("Não foi possível encontrar o recebimento"); }

    receiptKart.receipt_id = receipt.id;

    lib.display("receipt-dropdown-box", "none");
    lib.display("receipt-detail-box", "");

    document.getElementById("count-confirm-btn").dataset.receipt_id = receipt.id;

    let detail_div = document.getElementById("receipt-detail-div");
    detail_div.innerHTML = "";

    detail_div.append(lib.element.info("b3", "Nº da produção", receipt.production_id));
    detail_div.append(lib.element.info("b3", "Lacre", receipt.seal));
    detail_div.append(lib.element.info("b3", "Malote", `${receipt.pouch}/${receipt.preparation_volume}`));

    receiptKart.products = receipt.products.reduce((products, product) => {
      for (let i in receipt.received_products) {
        if (receipt.received_products[i].product_id == product.product_id) {
          products.push(receipt.received_products[i]);
          return products;
        }
      };

      products.push(product);
      return products;
    }, []);

    receiptKart.products = receipt.received_products.reduce((received_products, received_product) => {
      for (let i in receiptKart.products) {
        if (received_product.product_id == receiptKart.products[i].product_id) {
          return received_products;
        }
      };

      received_products.push(received_product);
      return received_products;
    }, receiptKart.products);

    receiptKart.render();
  };

  function closeReceiptDetail() {
    lib.display("receipt-detail-box", "none");
    lib.display("receipt-dropdown-box", "");
  };

  function receiptCount(e, receipt_id) {
    e.preventDefault();

    let received_product = {
      id: e.target.id.value,
      receipt_id: receipt_id,
      product_id: e.target.product_id.value,
      amount: e.target.amount.value
    };

    lib.auth(async (pass) => {
      received_product.user_pass = pass;

      let response = await API.response(Production.receipt.product.create, received_product);
      if (!response) { return false; }

      receiptDetail(receipt_id);
    });
  };

  document.getElementById("count-confirm-btn").addEventListener("click", async e => {
    for (let i in receiptKart.products) {
      if (!receiptKart.products[i].id) {
        return lib.message("Não é possível confirmar a contagem sem preencher todos os produtos.");
      }
    };

    lib.auth(async (pass) => {
      let receipt = {
        id: e.target.dataset.receipt_id || "",
        user_pass: pass
      };

      let response = await API.response(Production.receipt.count.confirm, receipt);
      if (!response) { return false; }

      lib.message(response.done, () => { window.location.reload() });
    });
  });
</script>