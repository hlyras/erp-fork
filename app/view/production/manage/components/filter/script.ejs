<script>
  const MONTHS = [
    { id: 1, name: "Janeiro", days: 31 },
    { id: 2, name: "Fevereiro", days: 28 },
    { id: 3, name: "Março", days: 31 },
    { id: 4, name: "Abril", days: 30 },
    { id: 5, name: "Maio", days: 31 },
    { id: 6, name: "Junho", days: 30 },
    { id: 7, name: "Julho", days: 31 },
    { id: 8, name: "Agosto", days: 31 },
    { id: 9, name: "Setembro", days: 30 },
    { id: 10, name: "Outubro", days: 31 },
    { id: 11, name: "Novembro", days: 30 },
    { id: 12, name: "Dezembro", days: 31 }
  ];

  const DAYS = ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'];

  document.getElementById("production-filter-form").addEventListener("submit", async e => {
    e.preventDefault();

    let date = new Date(lib.genTimestamp());

    const production = {
      location: e.target.location.value,
      startPeriod: lib.genTimestamp() - (lib.timestampDay() * (7 + date.getDay())),
      endPeriod: (lib.genTimestamp() + (lib.timestampDay() * (7 + (7 - date.getDay())))) - 1,
      status: e.target.status.value
    };

    if (production.location == "Interna") { production.seamstress_id = e.target.internal_seamstress_id.value; };
    if (production.location == "Externa") { production.seamstress_id = e.target.external_seamstress_id.value; };

    const productions = await API.response(Production.filter, production);
    if (!productions) { return false; }

    lib.display("production-detail-box", "none");
    lib.display("production-filter-box", "");

    productionFilter(productions);
  });

  function setFilterLocation(input) {
    switch (input.value) {
      case "Interna":
        lib.display("internal-seamstress-select", "");
        lib.display("external-seamstress-select", "none");
        break;
      case "Externa":
        lib.display("external-seamstress-select", "");
        lib.display("internal-seamstress-select", "none");
        break;
    };
  };

  function productionFilter(productions) {
    let filter_div = document.getElementById("production-filter-box");
    filter_div.innerHTML = "";

    !productions.length && filter_div.append(lib.element.create("div", {
      class: "box b1 lucida-grande bold center"
    }, "Sem resultados."));

    let date = new Date(lib.genTimestamp());

    let previousYear = date.getFullYear() - 1;
    let currentYear = date.getFullYear();
    let nextYear = date.getFullYear() + 1;

    let previousMonth = date.getMonth() - 1;
    if (previousMonth < 0) { previousMonth = 11; }
    let currentMonth = date.getMonth();
    let nextMonth = date.getMonth() + 1;
    if (nextMonth > 11) { nextMonth = 0 }

    let currentSunday = date.getDate() - date.getDay();
    if (currentSunday < 1 && currentMonth == 0) { currentSunday = MONTHS[previousMonth].days - (-currentSunday); }

    let previousSunday = currentSunday - 7;
    if (previousSunday < 1) { previousSunday = MONTHS[previousMonth].days - (-previousSunday); }

    let previous_week_div = lib.element.create("div", { class: "box b3 container border-st radius-5 margin-top-5 padding-5" });
    previous_week_div.append(lib.element.create("div", { class: "box b1 lucida-grande bold underline center margin-top-5" }, "Última semana"));
    let current_week_div = lib.element.create("div", { class: "box b3 container border-st radius-5 margin-top-5 padding-5" });
    current_week_div.append(lib.element.create("div", { class: "box b1 lucida-grande bold underline center margin-top-5" }, "Semana atual"));
    let next_week_div = lib.element.create("div", { class: "box b3 container border-st radius-5 margin-top-5 padding-5" });
    next_week_div.append(lib.element.create("div", { class: "box b1 lucida-grande bold underline center margin-top-5" }, "Próxima semana"));

    let day_box_class = "box b1 container lucida-grande em08 bold border-st center margin-top-5 padding-5";

    // Last Week
    for (let i = 0; i < 7; i++) {
      let day_box = lib.element.create("div", { class: day_box_class });

      if (date.getDate() - date.getDay() - 7 + i <= 0) {
        if (previousSunday + i <= MONTHS[previousMonth].days) {
          if (previousMonth == 11) {
            let day = `${previousYear}-${previousMonth + 1}-${previousSunday + i}`;

            previous_week_div.append(day_box);

            productionRender(productions, day, day_box, i);
          } else {
            let day = `${currentYear}-${previousMonth + 1}-${previousSunday + i}`;

            previous_week_div.append(day_box);

            productionRender(productions, day, day_box, i);
          }
        }
      } else {
        let day = `${currentYear}-${currentMonth + 1}-${currentSunday - 7 + i}`;

        previous_week_div.append(day_box);

        productionRender(productions, day, day_box, i);
      }
    };

    // Current Week
    for (let i = 0; i < 7; i++) {
      let day_box = lib.element.create("div", { class: day_box_class });

      if (date.getDate() - date.getDay() + i <= 0) {
        if (currentSunday + i <= MONTHS[previousMonth].days) {
          if (previousMonth == 11) {
            let day = `${previousYear}-${previousMonth + 1}-${currentSunday + i}`;

            current_week_div.append(day_box);

            productionRender(productions, day, day_box, i);
          } else {
            let day = `${currentYear}-${MONTHS[previousMonth].id}-${MONTHS[previousMonth].days - (-currentSunday) + i}`;

            current_week_div.append(day_box);

            productionRender(productions, day, day_box, i);
          }
        }
      } else if (currentSunday + i > MONTHS[currentMonth].days) {
        let day = `${currentYear}-${nextMonth + 1}-${currentSunday - MONTHS[currentMonth].days + i}`;

        current_week_div.append(day_box);

        productionRender(productions, day, day_box, i);
      } else {
        let day = `${currentYear}-${currentMonth + 1}-${date.getDate() - date.getDay() + i}`;

        current_week_div.append(day_box);

        productionRender(productions, day, day_box, i);
      }
    };

    // Next Week
    for (let i = 0; i < 7; i++) {
      let day_box = lib.element.create("div", { class: day_box_class });

      if (date.getDate() - date.getDay() + 7 + i <= MONTHS[currentMonth].days) {
        let day = `${currentYear}-${currentMonth + 1}-${date.getDate() - date.getDay() + 7 + i}`;

        next_week_div.append(day_box);

        productionRender(productions, day, day_box, i);
      } else {
        if (nextMonth == 0) {
          let day = `${date.getDate() - date.getDay() + 7 + i - MONTHS[currentMonth].days} / ${MONTHS[nextMonth].name} / ${nextYear}`;

          next_week_div.append(day_box);

          productionRender(productions, day, day_box, i);
        } else {
          let day = `${currentYear}-${nextMonth + 1}-${date.getDate() - date.getDay() + 7 + i - MONTHS[currentMonth].days}`;

          next_week_div.append(day_box);

          productionRender(productions, day, day_box, i);
        }
      }
    };

    filter_div.append(previous_week_div);
    filter_div.append(current_week_div);
    filter_div.append(next_week_div);
  };

  function productionRender(productions, day, day_box, i) {
    let production_amount = 0;
    let production_amount_div = lib.element.create("div", { class: "mobile-box b8 center" }, (production_amount).toFixed(0));
    day_box.append(production_amount_div);

    day_box.append(lib.element.create("div", { class: "mobile-box b3-8 center" }, DAYS[i]));
    day_box.append(lib.element.create("div", { class: "mobile-box b3-8 center" }, lib.convertDate(day)));

    let day_expander = lib.element.create("div", { class: "mobile-box b8" });
    day_expander.append(lib.element.create("img", {
      src: "/images/icon/down-arrow.png",
      class: "image-prop size-20 icon pointer",
      onclick: `lib.displayDiv('$day-${day}', this, '/images/icon/down-arrow.png', '/images/icon/up-arrow.png',)`
    }));
    day_box.append(day_expander);

    let day_div = lib.element.create("div", {
      id: `$day-${day}`,
      class: "mobile-box a1 container center padding-5",
      style: "display: none;"
    });

    productions.forEach(production => {
      if (production.shipment_datetime >= lib.dateToTimestamp(day) && production.shipment_datetime < lib.dateToTimestamp(day) + lib.timestampDay() - 1) {
        let production_div = lib.element.create("div", { class: "mobile-box b1 container box-hover ground border radius-5 padding-5 margin-top-5 noselect" });
        production_div.append(lib.element.create("div", {
          class: "mobile-box b9 input-show border-st center pointer",
          onclick: `productionDetail(${production.id})`
        }, production.id));
        production_div.append(lib.element.create("div", { class: "mobile-box b4-9 em08 center" }, production.seamstress_name));
        production_div.append(lib.element.create("div", { class: "mobile-box b3 em08 center" }, production.status));
        production.status == "Ag. confirmação" && production_div.append(lib.element.icon('b9', 20, "/images/icon/edit.png", `productionEdit(${production.id})`));
        // production.status == "Ag. confirmação" && production_div.append(lib.element.icon('b9', 20, "/images/icon/trash.png", `productionCancel(${production.id})`));
        production_amount++;
        day_div.append(production_div);
      }
    });

    production_amount_div.innerHTML = "";
    production_amount_div.append(production_amount.toFixed(0));

    !production_amount && day_div.append(lib.element.create("div", { class: "box b1 center margin-top-5" }, "Nenhuma produção"));

    day_box.append(day_div);
  };
</script>